// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_LOCAL_URL") // uses connection pooling
    // directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
    id              Int             @id @default(autoincrement())
    name            String          @db.VarChar(255)
    email           String          @unique @db.VarChar(255)
    password        String          @db.VarChar(255)
    createDate      DateTime        @default(now())
    updateDate      DateTime?       @updatedAt
    isDelete        Boolean         @default(false)
    isAdmin         Boolean         @db.Boolean
}

model Variant {
    id              Int             @id @default(autoincrement())
    name            String          @db.VarChar(255)
    description     String?         @db.VarChar(255)
    parent          Variant?        @relation("ParentChild", fields: [parentId], references: [id])
    children        Variant[]       @relation("ParentChild")
    parentId        Int?
    createDate      DateTime        @default(now())
    updateDate      DateTime?       @updatedAt
    isDelete        Boolean         @default(false)
    proucts1        Product[]       @relation("VariantOne")
    proucts2        Product[]       @relation("VariantTwo")
    class1          ProductClass[]  @relation("ClassVariantOne")
    class2          ProductClass[]  @relation("ClassVariantTwo")
}

model Category {
    id              Int             @id @default(autoincrement())
    name            String          @db.VarChar(255)
    description     String?         @db.VarChar(255)
    parent          Category?       @relation("ParentChild", fields: [parentId], references: [id])
    children        Category[]      @relation("ParentChild")
    parentId        Int?
    createDate      DateTime        @default(now())
    updateDate      DateTime?       @updatedAt
    isDelete        Boolean         @default(false)
    products        ProductCategory[]
}

model ProductCategory {
    product         Product         @relation(fields: [productId], references: [id])
    productId       Int
    category        Category        @relation(fields: [categoryId], references: [id])
    categoryId      Int
    createDate      DateTime        @default(now())

    @@id([productId, categoryId])
}

model Product {
    id              Int             @id @default(autoincrement())
    name            String          @db.VarChar(255)
    description     String          @db.Text
    variant1        Variant?        @relation("VariantOne", fields: [variant1Id], references: [id])
    variant1Id      Int?
    variant2        Variant?        @relation("VariantTwo", fields: [variant2Id], references: [id])
    variant2Id      Int?
    createDate      DateTime        @default(now())
    updateDate      DateTime?       @updatedAt
    isDelete        Boolean         @default(false)
    productClasses  ProductClass[]
    categories      ProductCategory[]
    images          ProductImage[]
    customerFavourites  CustomerFavourite[]
    cartItems       CartItem[]
    orderItems      OrderItem[]
}

model ProductClass {
    id              Int             @id @default(autoincrement())
    product         Product         @relation(fields: [productId], references: [id])
    productId       Int
    variant1        Variant?        @relation("ClassVariantOne", fields: [variant1Id], references: [id])
    variant1Id      Int?
    variant2        Variant?        @relation("ClassVariantTwo", fields: [variant2Id], references: [id])
    variant2Id      Int?
    price           Float
    quantity        Int
    createDate      DateTime        @default(now())
    updateDate      DateTime?       @updatedAt
    isDelete        Boolean         @default(false)
    cartItems       CartItem[]
    orderItems      OrderItem[]
}

model ProductImage {
    id              Int             @id @default(autoincrement())
    product         Product         @relation(fields: [productId], references: [id])
    productId       Int
    imgUrl          String          @db.VarChar(255)
    createDate      DateTime        @default(now())
}

model Customer {
    id              Int             @id @default(autoincrement())
    name            String          @unique @db.VarChar(255)
    email           String          @unique @db.VarChar(255)
    password        String          @db.VarChar(255)
    avatar          String?         @db.VarChar(255)
    status          Status          @relation(fields: [statusId], references: [id])
    statusId        Int
    createDate      DateTime        @default(now())
    updateDate      DateTime?       @updatedAt
    isDelete        Boolean         @default(false)
    address         CustomerAddress[]
    favourites      CustomerFavourite[]
    cart            Cart?
    orders          Order[]
}

model CustomerAddress {
    id              Int             @id @default(autoincrement())
    customer        Customer        @relation(fields: [customerId], references: [id])
    customerId      Int
    address         String          @db.VarChar(255)
    city            String          @db.VarChar(255)
    state           String          @db.VarChar(255)
    country         String          @db.VarChar(255)
    isDefault       Boolean         @default(false)
    createDate      DateTime        @default(now())
    updateDate      DateTime?       @updatedAt
    isDelete        Boolean         @default(false)
    orders          Order[]
}

model CustomerFavourite {
    customer        Customer        @relation(fields: [customerId], references: [id])
    customerId      Int
    product         Product         @relation(fields: [productId], references: [id])
    productId       Int
    createDate      DateTime        @default(now())

    @@id([customerId, productId])
}

model CartItem {
    id              Int             @id @default(autoincrement())
    cart            Cart            @relation(fields: [cartId], references: [id])
    cartId          Int
    product         Product         @relation(fields: [productId], references: [id])
    productId       Int
    productClass    ProductClass    @relation(fields: [productClassId], references: [id])
    productClassId  Int
    quantity        Int
    createDate      DateTime        @default(now())
    updateDate      DateTime?       @updatedAt
}

model Cart {
    id              Int             @id @default(autoincrement())
    customer        Customer        @relation(fields: [customerId], references: [id])
    customerId      Int             @unique
    createDate      DateTime        @default(now())
    updateDate      DateTime?       @updatedAt
    cartItems       CartItem[]
}

model OrderItem {
    id              Int             @id @default(autoincrement())
    order           Order           @relation(fields: [orderId], references: [id])
    orderId         Int
    product         Product         @relation(fields: [productId], references: [id])
    productId       Int
    productClass    ProductClass    @relation(fields: [productClassId], references: [id])
    productClassId  Int
    quantity        Int
    orderStatus     OrderStatus     @relation(fields: [orderStatusId], references: [id])
    orderStatusId   Int
    createDate      DateTime        @default(now())
    updateDate      DateTime?       @updatedAt
}

model Order {
    id              Int             @id @default(autoincrement())
    customer        Customer        @relation(fields: [customerId], references: [id])
    customerId      Int             @unique
    subTotal        Int
    deliveryAmount  Int             @default(0)
    totalAmount     Int
    paymentAmount   Int?
    address         CustomerAddress?@relation(fields: [addressId], references: [id])
    addressId       Int?        
    name            String?         @db.VarChar(255)
    email           String?         @db.VarChar(255)
    phone           String?         @db.VarChar(255)
    note            String?         @db.Text
    orderPayment    OrderPayment?   @relation(fields: [orderPaymentId], references: [id])
    orderPaymentId  Int?
    orderStatus     OrderStatus     @relation(fields: [orderStatusId], references: [id])
    orderStatusId   Int
    createDate      DateTime        @default(now())
    orderDate       DateTime?       @db.Date
    deliveryDate    DateTime?       @db.Date
    updateDate      DateTime?       @updatedAt
    orderItems      OrderItem[]
}

model OrderPayment {
    id              Int             @id @default(autoincrement())
    payment         Payment         @relation(fields: [paymentId], references: [id])
    paymentId       Int
    cardData        String?         @db.Text
    orders          Order[]       
}

model Payment {
    id              Int             @id @default(autoincrement())
    name            String          @db.VarChar(255)
    logo            String?         @db.VarChar(255)
    image           String?         @db.VarChar(255)
    order           Int
    payments        OrderPayment[]
}

model Status {
    id              Int             @id @default(autoincrement())
    name            String          @unique
    order           Int
    customers        Customer[]
}

model OrderStatus {
    id              Int             @id @default(autoincrement())
    name            String          @unique
    order           Int
    customerOrders  Order[]
    orderItems      OrderItem[]
}